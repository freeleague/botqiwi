import telebot
from SimpleQIWI import *
from qiwi_keyboard import *
from qiwi_config import *
import sqlite3


@bot.message_handler(commands=['start'])
def start_message(message):
    inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
    inline = types.InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f'BUY_')
    inline_keyboard.add(inline)
    bot.send_message(message.chat.id,
                     'üíµ–ü—Ä–∏–≤–µ—Ç,—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø', reply_markup=inline_keyboard)
    user_id = message.from_user.id
    with sqlite3.connect('users.db') as conn:
        cur = conn.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS user(user_id INTEGER, access TEXT);""")
        cur.execute("SELECT * FROM user WHERE `user_id` = '{}'".format(user_id))
        row = cur.fetchall()
        if len(row) == 0:
            cur.execute("INSERT INTO `user` (`user_id`, `access`) VALUES(?,?)", (user_id, 'False',))
    chat_id = message.from_user.id
    with sqlite3.connect('users.db') as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM user WHERE `user_id` = '{}'".format(user_id))
        row = cur.fetchall()
        if row[0][0] == user_id and row[0][1] == 'True':
            bot.send_message(message.from_user.id, '–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø!', reply_markup=sub_keyboard())
    if chat_id in admin:
        bot.send_message(chat_id, '–í—ã *–∞–¥–º–∏–Ω*', parse_mode="Markdown",
                         reply_markup=admin_keyboard())


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if 'BUY_' in call.data:
        deposit(call, amount)
    elif 'STATUS-' in call.data:
        regex = call.data.split('-')
        user_status_pay(call, regex[1], regex[2])
    elif 'many_' in call.data:
        user_id = call.message.chat.id
        message = call.message
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≤–∏–¥–µ: –Ω–æ–º–µ—Ä:—Å—É–º–º–∞')
        bot.register_next_step_handler(message, pay_many)
    elif 'one_' in call.data:
        user_id = call.message.chat.id
        message = call.message
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º')
        bot.register_next_step_handler(message, one_number)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    try:
        chat_id = message.from_user.id
        if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏üí≥':
            bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ –≤–∏–¥–µ: –Ω–æ–º–µ—Ä:—Ç–æ–∫–µ–Ω', parse_mode="Markdown")
            bot.register_next_step_handler(message, add_qiwi)
        elif message.text == '–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Åüí∞':
            user_id = message.from_user.id
            with sqlite3.connect('users.db') as conn:
                cur = conn.cursor()
                cur.execute("SELECT `qiwi` FROM qiwi WHERE `user_id` = '{}'".format(user_id))
                row = cur.fetchall()
                for rows in row:
                    qiwi1 = str(rows[0])
                    qiwi = qiwi1.split(':')
                    phone = qiwi[0]
                    token = qiwi[1]
                    api = QApi(token=token, phone=phone)
                    bot.send_message(user_id, 'üí∞–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ ' + str(phone) + ' : ' + str(api.balance[0]) + '‚ÇΩ')
        elif message.text == '–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥üí±':
            inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
            inline = types.InlineKeyboardButton(text=f"C–æ –≤—Å–µ—Ö", callback_data=f'many_')
            inline1 = types.InlineKeyboardButton(text="–° –æ–¥–Ω–æ–≥–æ", callback_data='one_')
            inline_keyboard.add(inline, inline1)
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ', reply_markup=inline_keyboard)
        elif message.text == '–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚úî' and chat_id in admin:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            bot.register_next_step_handler(message, give_sub)
        elif message.text == '–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚úñ' and chat_id in admin:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            bot.register_next_step_handler(message, remove_sub)
        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞üìà' and chat_id in admin:
            user_id = message.from_user.id
            with sqlite3.connect('users.db') as conn:
                cur = conn.cursor()
                cur.execute("SELECT `access` FROM `user` WHERE `access` = '{}'".format('True'))
                row = cur.fetchall()
                bot.send_message(user_id, '–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É–ø–∏–≤—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫—É: ' + str(len(row)))
        elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞üí¨' and chat_id in admin:
            message = bot.send_message(chat_id, 'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å–æ–æ–±—â–µ–Ω–∏–µ* –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', parse_mode="Markdown")
            bot.register_next_step_handler(message, add_message)
    except Exception as e:
        bot.send_message(message.from_user.id,
                         "–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–º–æ—â—å: @faulmit")
        print(e)




bot.polling()

